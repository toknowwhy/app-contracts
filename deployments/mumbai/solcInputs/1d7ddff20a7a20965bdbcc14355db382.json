{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/core/TinuToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../interfaces/ITinuToken.sol\";\nimport '../interfaces/ICollateralManager.sol';\n\n// import \"hardhat/console.sol\";\n\n// Everyone can mint, as long as there is enough collateral.\n\ncontract TinuToken is ERC20, ITinuToken {\n\n    event Mint (\n        address indexed to,\n        uint256 value\n    );\n    event Burn (\n        address indexed from,\n        uint256 value\n    );\n\n    address public gov;\n\n    address public minter;\n    \n    modifier onlyGov{\n        require(msg.sender == gov, \"only gov!\");\n        _;\n    }\n    constructor() ERC20(\"TINU\", \"TINU\") {\n        gov = msg.sender;\n    }\n\n    function setGov(address _gov) public onlyGov{\n          gov = _gov;\n    }\n\n    function setMinter(address _newMinter) public onlyGov {\n        minter = _newMinter;\n    }\n\n    function mint(address _to, uint256 _value) external override returns(bool) {\n        require(msg.sender == minter, \"only minter!\");\n        _mint(_to, _value);\n        emit Mint(_to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) external override returns(bool) {\n        _burn(msg.sender, _value);\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}\n"
    },
    "contracts/core/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport '../interfaces/ITreasury.sol';\n\ncontract Treasury is ITreasury {\n\n    mapping (address => uint256) public override poolAmounts;\n    address public gov;\n\n    constructor() {\n        gov = msg.sender;\n    }\n\n    function setGov(address _gov) public {\n        gov = _gov;\n    }\n    function withdraw(address _token, uint256 _value, address _account) public {\n        \n    }\n}"
    },
    "contracts/core/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\nimport '../interfaces/IVault.sol';\nimport \"../interfaces/ITinuToken.sol\";\nimport '../interfaces/ICollateralManager.sol';\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport '../interfaces/IVaultPriceFeed.sol';\n\n// import \"hardhat/console.sol\";\n\ncontract Vault is IVault {\n\n    using SafeMath for uint256;\n\n    event IncreaseCollateral (\n        address indexed owner,\n        uint256 indexed unitDebt,\n        address collateralToken,\n        uint256 amount,\n        uint256 indexed liquidationPrice\n    );\n\n    event DecreaseCollateral (\n        address indexed owner,\n        uint256 indexed unitDebt,\n        address collateralToken,\n        uint256 collateralAmount,\n        uint256 indexed liquidationPrice\n    );\n\n    event CollateralOwnerTrasnfer (\n        address indexed from,\n        address indexed to,\n        address token,\n        uint256 tokenAssets,\n        uint256 unitDebt\n    );\n\n    event IncreaseDebt (\n        address indexed owner,\n        uint256 indexed unitDebt,\n        address collateralToken,\n        uint256 amount,\n        uint256 indexed liquidationPrice\n    );\n\n    event DecreaseDebt (\n        address indexed owner,\n        uint256 indexed unitDebt,\n        address collateralToken,\n        uint256 amount,\n        uint256 indexed liquidationPrice\n    );\n\n    event Approval(\n        address indexed owner, \n        address operator,\n        bool allow\n    );\n\n    event LiquidateCollateral(\n        address indexed owner,\n        address collateralToken,\n        uint256 tokenAssets,\n        uint256 unitDebt,\n        address feeTo\n    );\n\n    address public gov;\n\n    address public tinu;\n\n    address public priceFeed;\n\n    address public treasury;\n\n    uint256 public liquidationTreasuryFee = 990; // 990 = 1.0%\n\n    uint256 public liquidationRatio = 1150; // 1150 = 15.0%\n    \n    uint256 public minimumCollateral = 100 * 1e18 ; // default 100 UNIT\n    \n    struct Account {\n        uint256 tokenAssets;\n        uint256 tinuDebt;\n    }\n\n    mapping (address => mapping (address => Account) ) public override vaultOwnerAccount;\n\n    mapping (address => Account) public vaultPoolAccount;\n\n    mapping(address => mapping(address => bool)) public allowances;\n\n    modifier onlyGov {\n        require(msg.sender == gov, \"Vault: onlyGov\");\n        _;\n    }\n\n    constructor(address _tinu) {\n        gov = msg.sender;\n        tinu = _tinu;\n    }\n\n    function setGov(address _gov) public onlyGov{\n        gov = _gov;\n    }\n\n    function setPriceFeed(address _priceFeed) public onlyGov {\n        priceFeed = _priceFeed;\n    }\n\n    function setLiquidationRatio(uint256 _ratio) public onlyGov {\n        liquidationRatio = _ratio;\n    }\n    function setTreasury(address _treasury) public  onlyGov{\n        treasury = _treasury;\n    }\n\n    function setMinimumCollateral(uint256 _minimumCollateral) public  onlyGov{\n        minimumCollateral = _minimumCollateral;\n    }\n\n    function setLiquidationTreasuryFee(uint256 _liquidationTreasuryFee) public  onlyGov{\n        liquidationTreasuryFee = _liquidationTreasuryFee;\n    }\n\n    // the governance controlling this function should have a timelock\n    function upgradeVault(address _newVault, address _token, uint256 _amount) external onlyGov {\n        IERC20(_token).transfer(_newVault, _amount);\n    }\n\n    function approve(address _operator, bool _allow) public {\n        allowances[msg.sender][_operator] = _allow;\n        emit Approval(msg.sender, _operator, _allow);\n    }\n\n    function increaseCollateral(\n        address _collateralToken, \n        address _receiver\n    ) external override returns (bool) {\n        uint256 _balance0 = vaultPoolAccount[_collateralToken].tokenAssets;\n        uint256 _balance1 = IERC20(_collateralToken).balanceOf(address(this));\n        require(_balance1 > 0, \"Vault: balance1==0\");\n        uint256 _balanceDelta = _balance1.sub(_balance0);\n        require(_balanceDelta > 0, \"Vault: 0\");\n        vaultOwnerAccount[_receiver][_collateralToken].tokenAssets =  vaultOwnerAccount[_receiver][_collateralToken].tokenAssets.add(_balanceDelta);\n        vaultPoolAccount[_collateralToken].tokenAssets =  vaultPoolAccount[_collateralToken].tokenAssets.add(_balanceDelta);\n        emit IncreaseCollateral(\n            _receiver, \n            vaultOwnerAccount[_receiver][_collateralToken].tinuDebt, \n            _collateralToken, \n            _balanceDelta, \n            _getLiquidationPrice(_receiver, _collateralToken)\n        );\n        return true;\n    }\n\n    function decreaseCollateral(\n        address _collateralToken,\n        address _receiver,\n        uint256 _collateralAmount\n    ) external override returns (bool){\n        _decreaseCollateral(msg.sender, _collateralToken, _receiver, _collateralAmount);\n        return true;\n    }\n\n    function _decreaseCollateral(\n        address _from,\n        address _collateralToken,\n        address _receiver,\n        uint256 _collateralAmount\n    ) internal returns (bool){\n        uint256 _tokenAssets = vaultOwnerAccount[_from][_collateralToken].tokenAssets;\n        require(_collateralAmount <= _tokenAssets, \"Vault: insufficient collateral balance!\");\n\n        vaultOwnerAccount[_from][_collateralToken].tokenAssets =  vaultOwnerAccount[_from][_collateralToken].tokenAssets.sub(_collateralAmount);\n        vaultPoolAccount[_collateralToken].tokenAssets =  vaultPoolAccount[_collateralToken].tokenAssets.sub(_collateralAmount);\n     \n        bool yes = validateLiquidation(_from, _collateralToken, true); \n        require(!yes, \"Vault: collateral amount out of range\");\n\n        IERC20(_collateralToken).transfer(_receiver, _collateralAmount);\n        emit DecreaseCollateral(\n            _from, \n            vaultOwnerAccount[_from][_collateralToken].tinuDebt, \n            _collateralToken, \n            _collateralAmount, \n            _getLiquidationPrice(_from, _collateralToken));\n        return true;\n    }\n    \n    function decreaseCollateralFrom(\n        address _from,\n        address _collateralToken,\n        address _receiver,\n        uint256 _collateralAmount\n    ) external override returns (bool){\n        require(allowances[_from][msg.sender], \"Vault: not allow\");\n        _decreaseCollateral(_from, _collateralToken, _receiver, _collateralAmount);\n        return true;\n    }\n\n    function _increaseDebt(address _from, address _collateralToken, uint256 _amount, address _receiver) internal returns (bool)  {\n        vaultOwnerAccount[_from][_collateralToken].tinuDebt = vaultOwnerAccount[_from][_collateralToken].tinuDebt.add(_amount);\n        bool yes = validateLiquidation(_from, _collateralToken, true);\n        require(!yes, \"Vault: unit debt out of range\");\n\n        ITinuToken(tinu).mint(_receiver, _amount);\n        emit IncreaseDebt(\n            _from, \n            vaultOwnerAccount[_from][_collateralToken].tinuDebt,\n            _collateralToken, \n            _amount, \n            _getLiquidationPrice(_from, _collateralToken)\n        );\n        return true;\n    }\n    \n    function increaseDebt(address _collateralToken, uint256 _amount, address _receiver) external override returns (bool)  {\n        _increaseDebt(msg.sender, _collateralToken, _amount, _receiver);\n        \n        return true;\n    }\n    function increaseDebtFrom(address _from, address _collateralToken, uint256 _amount, address _receiver) external override returns (bool)  {\n        require(allowances[_from][msg.sender], \"Vault: not allow\");\n        _increaseDebt(_from, _collateralToken, _amount, _receiver);\n\n        return true;\n    }\n\n    function decreaseDebt(\n        address _collateralToken,\n        address _receiver\n    ) external override returns (bool) {\n        uint256 _balance = IERC20(tinu).balanceOf(address(this));\n        require(_balance > 0, \"balance == 0\");\n        ITinuToken(tinu).burn(_balance);\n        vaultOwnerAccount[_receiver][_collateralToken].tinuDebt = vaultOwnerAccount[_receiver][_collateralToken].tinuDebt.sub(_balance);\n        emit DecreaseDebt(\n            _receiver, \n            vaultOwnerAccount[_receiver][_collateralToken].tinuDebt,\n            _collateralToken, \n            _balance, \n            _getLiquidationPrice(_receiver, _collateralToken)\n        );\n\n        return true;\n    }\n\n    function liquidation(address _collateralToken, address _account, address _feeTo) external override returns (bool) {\n        bool yes = validateLiquidation(_account, _collateralToken, false);\n        require(yes, \"Vault: no validateLiquidation\");\n        uint256 _balance = IERC20(tinu).balanceOf(address(this));\n        Account storage account = vaultOwnerAccount[_account][_collateralToken];\n        require(_balance >= account.tinuDebt, \"Vault: insufficient unit token\");\n        ITinuToken(tinu).burn(account.tinuDebt);\n\n        uint256 _treasuryFee =  account.tokenAssets.mul(1000).sub(account.tokenAssets.mul(liquidationTreasuryFee)).div(1000); // 1%, liquidationTreasuryFee default 990\n        uint256 _returnCollateral = account.tokenAssets.sub(_treasuryFee);\n\n        IERC20(_collateralToken).transfer(treasury, _treasuryFee);\n        IERC20(_collateralToken).transfer(_feeTo, _returnCollateral);\n\n        emit LiquidateCollateral(_account, _collateralToken, account.tokenAssets, account.tinuDebt, _feeTo);\n        account.tinuDebt = 0;\n        account.tokenAssets = 0;\n\n        return true;\n    }\n\n    function validateLiquidation(address _account, address _collateralToken, bool _checkCollateral ) public view returns(bool){\n        Account memory account = vaultOwnerAccount[_account][_collateralToken];\n        uint256 _price = getPrice(_collateralToken);\n        uint256 _tokenTinuAmount = tokenToTinu(_price, account.tokenAssets);\n\n        if(_checkCollateral && account.tinuDebt > 0) {\n            require(_tokenTinuAmount >=  minimumCollateral, \"Vault: minimumCollateral\");\n        }\n\n        if(_tokenTinuAmount.mul(1000) >= account.tinuDebt.mul(liquidationRatio)) { // liquidationRatio = 1150.  115.0  \n            return false;\n        }\n        return true;\n    }\n\n    function _getLiquidationPrice(address _account, address _collateralToken ) public view returns(uint256) {\n        Account memory account = vaultOwnerAccount[_account][_collateralToken];\n        if (account.tokenAssets > 0) {\n            uint256 _liquidationPrice = account.tinuDebt.mul(liquidationRatio).div(account.tokenAssets);\n            return _liquidationPrice;\n        } \n        return 0;\n    }\n\n    function tokenToTinu(uint256 _price, uint256 amount) public pure returns(uint256){\n        return _price.mul(amount).div(1e18);\n    }\n\n    function getPrice(address _token) public override view returns (uint256) {\n        return IVaultPriceFeed(priceFeed).getPrice(_token);\n    }\n   \n    function transferVaultOwner(address _newAccount, address _collateralToken) external override {\n        Account storage account = vaultOwnerAccount[msg.sender][_collateralToken];\n        Account storage newAccount = vaultOwnerAccount[_newAccount][_collateralToken];\n        require(newAccount.tokenAssets == 0, \"Vault: newAccount not new\");     \n        \n        newAccount.tokenAssets = newAccount.tokenAssets.add(account.tokenAssets);\n        newAccount.tinuDebt = newAccount.tinuDebt.add(account.tinuDebt);\n\n        account.tokenAssets = 0;\n        account.tinuDebt = 0;\n    \n        emit CollateralOwnerTrasnfer(msg.sender, _newAccount, _collateralToken, account.tokenAssets, account.tinuDebt);\n    }\n}"
    },
    "contracts/core/VaultPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport '../interfaces/IPriceFeed.sol';\nimport '../interfaces/IVaultPriceFeed.sol';\n\ncontract VaultPriceFeed is IVaultPriceFeed {\n    using SafeMath for uint256;\n\n    address public gov;\n\n    mapping (address => address) public priceFeeds;\n\n    mapping (address => uint256) public priceDecimals;\n\n    uint256 public constant PRICE_PRECISION = 10 ** 30;\n\n    modifier onlyGov() {\n        require(msg.sender == gov, \"VaultPriceFeed: forbidden\");\n        _;\n    }\n\n    constructor() {\n        gov = msg.sender;\n    }\n\n    function setGov(address _gov) external onlyGov {\n        gov = _gov;\n    }\n\n    function setTokenConfig(\n        address _token,\n        address _priceFeed,\n        uint256 _priceDecimals\n    ) external override onlyGov {\n        priceFeeds[_token] = _priceFeed;\n        priceDecimals[_token] = _priceDecimals;\n    }\n\n    // 把价格统一转成了30位\n    function getPrice(address _token) public override view returns (uint256) {\n        address priceFeedAddress = priceFeeds[_token];\n        require(priceFeedAddress != address(0), \"VaultPriceFeed: invalid price feed\");\n        IPriceFeed priceFeed = IPriceFeed(priceFeedAddress);\n        int256 price = priceFeed.latestAnswer();\n        // uint256 _priceDecimals = priceDecimals[_token];\n        return uint256(price);\n    }\n\n    function tokenToUnit(address _token, uint256 _price, uint256 amount) public view returns(uint256){\n        uint256 _priceDecimals = priceDecimals[_token];\n        return amount  * 1**_priceDecimals / _price;\n    }\n}"
    },
    "contracts/interfaces/IChainlinkFlags.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IChainlinkFlags {\n  function getFlag(address) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ICollateralManager.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ICollateralManager {\n    function liquidationFee(address) external view returns(uint256);\n    function maxDecreaseCollateralAmount(address _collateralToken, address _account,  uint256 _totalCollateralAmount) external view returns(uint256);\n    function maxMintUnitValue(address _collateralToken, address _account) external view returns(uint256);\n}"
    },
    "contracts/interfaces/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IPriceFeed {\n    function description() external view returns (string memory);\n    function aggregator() external view returns (address);\n    function latestAnswer() external view returns (int256);\n    function latestRound() external view returns (uint80);\n    function getRoundData(uint80 roundId) external view returns (uint80, int256, uint256, uint256, uint80);\n}\n"
    },
    "contracts/interfaces/ITinuToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface ITinuToken {\n    function mint(address _to, uint256 value) external returns(bool);\n    function burn(uint256 value) external returns(bool);\n    // function unitDebt(address _account, address _collateralToken) external view returns( uint256);\n}"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ITreasury {\n    function poolAmounts(address) external view returns(uint256);\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IVault {\n\n    // The number of all tokens in the pool\n    // function poolAmounts(address _token) external view returns (uint256);\n   \n    function increaseCollateral(address _collateralToken, address _receiver) external returns (bool);\n    \n    function decreaseCollateral(\n        address _collateralToken,\n        address _receiver, \n        uint256 _collateralAmount\n    ) external returns(bool);\n    \n    function decreaseCollateralFrom(\n        address _from,\n        address _collateralToken,\n        address _receiver,\n        uint256 _collateralAmount\n    ) external returns (bool);\n\n    function liquidation(address _token, address _account, address _feeTo\n    ) external returns (bool);\n\n    \n\n    // function vaultOwnerAccount(address _receiver, address _collateralToken) external view returns (uint256);\n\n    function increaseDebt(address _collateralToken, uint256 _amount, address _receiver) external returns (bool);\n    function increaseDebtFrom(address from,address _collateralToken, uint256 _amount, address _receiver) external returns (bool);\n\n    function decreaseDebt(\n        address _collateralToken,\n        address _receiver\n    ) external returns (bool);\n\n     function getPrice(address _token) external view returns (uint256);\n\n    function transferVaultOwner(address _newAccount, address _collateralToken) external;\n    // function transferFromVaultOwner(address _from ,address _newAccount, address _collateralToken, uint256 _tokenAssets, uint256 _unitDebt) external;\n\n    function vaultOwnerAccount(address _account, address _collateralToken) external view returns (uint256, uint256);\n\n}"
    },
    "contracts/interfaces/IVaultPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IVaultPriceFeed {\n\n    function getPrice(address _token) external view returns (uint256);\n \n    function setTokenConfig(\n        address _token,\n        address _priceFeed,\n        uint256 _priceDecimals\n    ) external;\n\n    function tokenToUnit(address _token, uint256 _price, uint256 amount) external view returns(uint256);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "contracts/oracle/UnitPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport '../interfaces/IPriceFeed.sol';\n\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\ncontract UnitPriceFeed is IPriceFeed {\n    int256 public answer;\n    uint80 public roundId;\n    string public override description = \"PriceFeed\";\n    address public override aggregator;\n\n    uint256 public decimals;\n\n    address public gov;\n\n    mapping (uint80 => int256) public answers;\n    mapping (address => bool) public isAdmin;\n\n    constructor() {\n        gov = msg.sender;\n        isAdmin[msg.sender] = true;\n    }\n\n    function setAdmin(address _account, bool _isAdmin) public {\n        require(msg.sender == gov, \"PriceFeed: forbidden\");\n        isAdmin[_account] = _isAdmin;\n    }\n\n    function latestAnswer() public override view returns (int256) {\n        return answer;\n    }\n\n    function latestRound() public override view returns (uint80) {\n        return roundId;\n    }\n\n    function setLatestAnswer(int256 _answer) public {\n        require(isAdmin[msg.sender], \"PriceFeed: forbidden\");\n        roundId = roundId + 1;\n        answer = _answer;\n        answers[roundId] = _answer;\n    }\n\n    // returns roundId, answer, startedAt, updatedAt, answeredInRound\n    function getRoundData(uint80 _roundId) public override view\n        returns (uint80, int256, uint256, uint256, uint80)\n    {\n        return (_roundId, answers[_roundId], 0, 0, 0);\n    }\n}\n"
    },
    "contracts/peripherals/RouterV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport '../interfaces/IVault.sol';\nimport \"../interfaces/IWETH.sol\";\n// import \"hardhat/console.sol\";\n\ncontract RouterV1 {\n    \n    address public VAULT;\n    address public WETH;\n    address public TINU;\n\n    event IncreaseCollateral (\n        address indexed receiver,\n        address collateralToken,\n        uint256 amount\n    );\n\n    event DecreaseCollateral (\n        address indexed receiver,\n        address collateralToken,\n        uint256 amount\n    );\n\n    event MintUnit (\n        address indexed receiver,\n        address collateralToken,\n        uint256 amount\n    );\n    event BurnUnit (\n        address indexed receiver,\n        address collateralToken,\n        uint256 amount\n    );\n    \n    // sepolia WETH 0x632AbC44b7C31B814DA1808325294572C3C1ef2a\n    constructor (address _vault, address _weth, address _tinu) {\n        VAULT = _vault;\n        WETH = _weth;\n        TINU = _tinu;\n    } \n    \n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n \n    function increaseCollateral(address _collateralToken, uint256 _tokenAmount, address _receiver) external returns(bool) {  \n        require(IERC20(_collateralToken).balanceOf(msg.sender) >= _tokenAmount, \"UintRouter: insufficient tokenAmount\");\n        IERC20(_collateralToken).transferFrom(msg.sender, VAULT, _tokenAmount);\n        IVault(VAULT).increaseCollateral(_collateralToken, _receiver);\n        emit IncreaseCollateral(_receiver, _collateralToken, _tokenAmount);\n        return true;\n    }\n\n    function increaseETH(address _receiver) external payable returns(bool) {  \n        require(msg.value > 0, \"UintRouter: amount cannot be 0\");\n        IWETH(WETH).deposit{value: msg.value}();\n        IWETH(WETH).transfer(VAULT, msg.value);\n        IVault(VAULT).increaseCollateral(WETH, _receiver);\n        emit IncreaseCollateral(_receiver, WETH, msg.value);\n        return true;\n    }\n\n    function decreaseCollateral(address _collateralToken, uint256 _tokenAmount, address _receiver) external returns(bool)  {\n        require(_tokenAmount > 0, \"UintRouter: amount cannot be 0\");\n        IVault(VAULT).decreaseCollateralFrom(msg.sender, _collateralToken, _receiver, _tokenAmount);\n        emit DecreaseCollateral(_receiver, _collateralToken, _tokenAmount);\n        return true;\n    }\n\n    function decreaseETH(uint256 _ETHAmount, address _receiver) external returns(bool)  {\n        require(_ETHAmount > 0, \"UintRouter: amount cannot be 0\");\n        IVault(VAULT).decreaseCollateralFrom(msg.sender, WETH, address(this), _ETHAmount);\n        IWETH(WETH).withdraw(_ETHAmount);\n        safeTransferETH(_receiver, _ETHAmount);\n        emit DecreaseCollateral(_receiver, WETH, _ETHAmount);\n        return true;\n    }\n\n    function mintUnit(address _collateralToken, uint256 _UNITAmount, address _receiver) external returns(bool) {\n        require(_UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n        IVault(VAULT).increaseDebtFrom(msg.sender, _collateralToken, _UNITAmount, _receiver);\n        emit MintUnit(_receiver, _collateralToken, _UNITAmount);\n        return true;\n    }\n\n    function burnUnit(address _collateralToken, uint256 _UNITAmount, address _receiver)  external returns(bool) {\n         require(_UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n        IERC20(TINU).transferFrom(msg.sender, VAULT, _UNITAmount);\n        IVault(VAULT).decreaseDebt( _collateralToken, _receiver);\n        emit BurnUnit(_receiver, _collateralToken, _UNITAmount);\n        return true;\n    }\n\n    function increaseCollateralAndMint(address _collateralToken, uint256 _tokenAmount, uint256 _UNITAmount, address _receiver) public returns(bool) {\n        require(_tokenAmount > 0 || _UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n        if(_tokenAmount >0 ) {\n            require(IERC20(_collateralToken).balanceOf(msg.sender) >= _tokenAmount, \"UintRouter: in\");\n            IERC20(_collateralToken).transferFrom(msg.sender, VAULT, _tokenAmount);\n            IVault(VAULT).increaseCollateral(_collateralToken, _receiver);\n            emit IncreaseCollateral(_receiver, _collateralToken, _tokenAmount);\n        }\n        if(_UNITAmount >0) {\n            IVault(VAULT).increaseDebtFrom(msg.sender, _collateralToken, _UNITAmount, _receiver);   \n            emit MintUnit(_receiver, _collateralToken, _UNITAmount);\n        }\n        return true;\n    }\n\n    function decreaseCollateralAndBurn(address _collateralToken, uint256 _tokenAmount, uint256 _UNITAmount, address _receiver) public returns(bool) {\n        require(_tokenAmount > 0 || _UNITAmount > 0, \"UintRouter: amount cannot be 0\");  \n        if(_UNITAmount > 0) {\n            IVault(VAULT).decreaseCollateralFrom(msg.sender, _collateralToken, _receiver, _tokenAmount);\n            IERC20(TINU).transferFrom(msg.sender, VAULT, _UNITAmount);\n            emit DecreaseCollateral(_receiver, _collateralToken, _tokenAmount);\n        }\n\n        if(_tokenAmount > 0) {\n            IVault(VAULT).decreaseDebt( _collateralToken, _receiver);\n            emit BurnUnit(_receiver, _collateralToken, _UNITAmount);\n        }\n        return true;\n    }\n\n    function increaseETHAndMint(uint256 _UNITAmount, address _receiver) public payable returns(bool) {\n        require(msg.value > 0 || _UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n        if(msg.value >0 ) {\n            IWETH(WETH).deposit{value: msg.value}();\n            IWETH(WETH).transfer(VAULT, msg.value);\n            IVault(VAULT).increaseCollateral(WETH, _receiver);\n            emit IncreaseCollateral(_receiver, WETH, msg.value);\n        }\n        if(_UNITAmount >0) {\n            IVault(VAULT).increaseDebtFrom(msg.sender, WETH, _UNITAmount, _receiver);   \n            emit MintUnit(_receiver, WETH, _UNITAmount);\n        }\n        return true;\n    }\n\n    function decreaseETHAndBurn(uint256 _ETHAmount, uint256 _UNITAmount, address _receiver) public payable returns(bool) {   \n        require(_ETHAmount > 0 || _UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n        if(_UNITAmount > 0) {\n            IERC20(TINU).transferFrom(msg.sender, VAULT, _UNITAmount);\n            IVault(VAULT).decreaseDebt(WETH, _receiver);\n            emit BurnUnit(_receiver, WETH, _UNITAmount);\n        }\n    \n        if(_ETHAmount > 0) {\n            IVault(VAULT).decreaseCollateralFrom(msg.sender, WETH, address(this), _ETHAmount);\n            uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\n            require(wethBalance > 0, \"UintRouter: WETH not allow 0\");\n            IWETH(WETH).withdraw(wethBalance);\n            safeTransferETH(_receiver, wethBalance);\n            emit DecreaseCollateral(_receiver, WETH, wethBalance);\n        }\n        return true;\n    }\n\n    function increaseETHAndBurn(uint256 _UNITAmount, address _receiver) public payable returns(bool) {\n        require(msg.value > 0 || _UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n        if(msg.value >0 ) {\n            IWETH(WETH).deposit{value: msg.value}();\n            IWETH(WETH).transfer(VAULT, msg.value);\n            IVault(VAULT).increaseCollateral(WETH, _receiver);\n            emit IncreaseCollateral(_receiver, WETH, msg.value);\n        }\n        if(_UNITAmount > 0) {\n            IERC20(TINU).transferFrom(msg.sender, VAULT, _UNITAmount);\n            IVault(VAULT).decreaseDebt(WETH, _receiver);\n            emit BurnUnit(_receiver, WETH, _UNITAmount);\n        }\n        return true;\n    }\n\n    function decreaseETHAndMint(uint256 _ETHAmount, uint256 _UNITAmount, address _receiver) public returns(bool) {   \n        require(_ETHAmount > 0 || _UNITAmount > 0, \"UintRouter: amount cannot be 0\");\n\n        if(_ETHAmount > 0) {\n            IVault(VAULT).decreaseCollateralFrom(msg.sender, WETH, address(this), _ETHAmount);\n            uint256 wethBalance = IERC20(WETH).balanceOf(address(this));\n            require(wethBalance > 0, \"UintRouter: WETH not allow 0\");\n            IWETH(WETH).withdraw(wethBalance);\n            safeTransferETH(_receiver, wethBalance);\n            emit DecreaseCollateral(_receiver, WETH, wethBalance);\n        }\n        if(_UNITAmount >0) {\n            IVault(VAULT).increaseDebtFrom(msg.sender, WETH, _UNITAmount, _receiver);   \n            emit MintUnit(_receiver, WETH, _UNITAmount);\n        }\n        return true;\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'UintRouter::safeTransferETH: ETH transfer failed');\n    }\n\n    function liquidation(address _collateralToken, address _account, address _feeTo) external returns (bool) {\n        (, uint256 _debt) = IVault(VAULT).vaultOwnerAccount(_account, _collateralToken);\n        uint256 _balance = IERC20(TINU).balanceOf(msg.sender);\n        require(_balance >= _debt, \"UintRouter: insufficient TINU token\");\n        IERC20(TINU).transferFrom(msg.sender, VAULT, _debt);\n        IVault(VAULT).liquidation(_collateralToken, _account, _feeTo);\n        return true;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}